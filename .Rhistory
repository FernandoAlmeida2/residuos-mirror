intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(bairro_choice_shape,geometry))
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(intersect_setores)
shiny::runApp()
shiny::runApp()
intersect_setores <- intersect_setores[-7,]
intersect_setores <- intersect_setores[-c(7),]
intersect_setores <- intersect_setores[-c(7),]
View(intersect_setores)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(bairro_choice_shape,geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry,
bairro_choice_shape))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry,
bairro_choice_shape))
View(intersect_setores)
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
View(intersect_setores)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
View(intersect_setores)
intersect_setores <- intersect_setores[-c(7),]
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
intersect_setores <- intersect_setores[-c(1),]
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
intersect_setores <- intersect_setores[-c(1),]
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
shiny::runApp()
shiny::runApp()
shiny::runApp()
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
View(intersect_setores)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
sf::st_boundary(intersect_setores)
sf::st_polygonize(intersect_setores)
intersect_setores <- sf::st_polygonize(sf::st_boundary(intersect_setores))
intersect_setores <- sf::st_polygonize(sf::st_boundary(intersect_setores))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
View(intersect_setores)
sf::st_boundary(intersect_setores)
sf::st_polygonize(sf::st_boundary(intersect_setores))
View(setores_shapes)
granja_portugal_I <- setores_shapes[setores_shapes$NOME == "203192 - SER V - GRANJA PORTUGAL I", ]
View(granja_portugal_I)
shiny::runApp()
shiny::runApp()
setores_shapes <- sf::st_read("data/ColetaDomiciliarSetorizacao.geojson")
View(setores_shapes)
shiny::runApp()
shiny::runApp()
View(intersect_setores)
union_setores <- lapply(setores_shapes$geometry, function(setor) {
return(sf::st_union(setor))
})
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
shiny::runApp()
shiny::runApp()
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
intersect_column <- lapply(setores_shapes$geometry, function(setor) {
return(sf::st_crosses(sf::st_boundary(bairro_choice_shape), sf::st_boundary(setor))[1] == 1)
})
setores_shapes$is_intersect <- intersect_column
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
union_setores <- lapply(setores_shapes$geometry, function(setor) {
return(sf::st_union(setor))
})
View(union_setores)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_union(geometry, bairro_choice_shape))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_combine(geometry, bairro_choice_shape))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_union(geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_combine(geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_union(geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_simplify(geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_polygonize(geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_segmentize(geometry))
sf::st_cast(intersect_setores, "POLYGON")
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_cast(geometry, "POLYGON"))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_cast(geometry, "MULTIPOLYGON"))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_cast(geometry, "MULTIPOLYGON"))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_cast(geometry, "POLYGON"))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_cast(geometry, "MULTIPOLYGON"))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_cast(geometry, "MULTIPOLYGON", do_split = TRUE))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_cast(geometry, "MULTIPOLYGON", group_or_split = TRUE))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
View(intersect_setores)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_cast(geometry, "MULTIPOLYGON") %>% sf::st_cast("POLYGON"))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_cast(geometry, "MULTIPOLYGON") | > sf::st_cast("POLYGON"))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_cast(geometry, "MULTIPOLYGON") |> sf::st_cast("POLYGON"))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_boundary(geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_boundary(geometry))
View(intersect_setores)
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_boundary(geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_line_merge(geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_polygonize(geometry))
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_polygon(geometry))
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_concave_hull(geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_convex_hull(geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
shiny::runApp()
shiny::runApp()
shiny::runApp()
bairro_choice_shape <- bairros_shapes[bairros_shapes$Nome == "Bairro Ellery", ]
View(bairro_choice_shape)
intersect_column <- lapply(setores_shapes$geometry, function(setor) {
return(sf::st_crosses(sf::st_boundary(bairro_choice_shape), sf::st_boundary(setor))[1] == 1)
})
setores_shapes$is_intersect <- intersect_column
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
View(intersect_setores)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
dplyr::mutate(intersect_setores[-c(1),], geometry = sf::st_intersection(geometry, bairro_choice_shape))
dplyr::mutate(intersect_setores[-c(2),], geometry = sf::st_intersection(geometry, bairro_choice_shape))
dplyr::mutate(intersect_setores[-c(3),], geometry = sf::st_intersection(geometry, bairro_choice_shape))
dplyr::mutate(intersect_setores[-c(4),], geometry = sf::st_intersection(geometry, bairro_choice_shape))
dplyr::mutate(intersect_setores[-c(5),], geometry = sf::st_intersection(geometry, bairro_choice_shape))
setores_shapes[setores_shapes$NOME == "203192 - SER V - GRANJA PORTUGAL I", ]
setores_bugs <- c("203192 - SER V - GRANJA PORTUGAL I", "30336 - SER III - BAIRRO ELLERY")
setor_bug <- setores_shapes[setores_shapes$NOME %in% setores_bugs[1],]$geometry[1]
setores_shapes[setores_shapes$NOME %in% setores_bugs[1],]$geometry <- sf::st_convex_hull(setor_bug)
View(setor_bug)
View(setores_shapes)
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
for (i in setores_bugs) {
setor_bug <- setores_shapes[setores_shapes$NOME == i,]$geometry
setores_shapes[setores_shapes$NOME == i,]$geometry <- sf::st_convex_hull(setor_bug)
}
View(setores_shapes)
setores_bugs <- c("203192 - SER V - GRANJA PORTUGAL I", "30336 - SER III - BAIRRO ELLERY")
for (i in setores_bugs) {
setor_bug <- setores_shapes[setores_shapes$NOME == i,]$geometry
setores_shapes[setores_shapes$NOME == i,]$geometry <- sf::st_convex_hull(setor_bug)
}
View(setores_shapes)
View(setor_bug)
setores_bugs <- c("203192 - SER V - GRANJA PORTUGAL I", "30336 - SER III - BAIRRO ELLERY")
for (i in setores_bugs) {
setor_bug <- setores_shapes[setores_shapes$NOME == i,]$geometry
setores_shapes[setores_shapes$NOME == i,]$geometry = sf::st_convex_hull(setor_bug)
}
setores_bugs <- c("203192 - SER V - GRANJA PORTUGAL I", "30336 - SER III - BAIRRO ELLERY")
for (i in setores_bugs) {
setor_bug <- setores_shapes[setores_shapes$NOME %in% i,]$geometry
setores_shapes[setores_shapes$NOME %in% i,]$geometry = sf::st_convex_hull(setor_bug)
}
View(setor_bug)
setores_bugs <- c("203192 - SER V - GRANJA PORTUGAL I", "30336 - SER III - BAIRRO ELLERY")
for (i in setores_bugs) {
setor_bug <- setores_shapes[setores_shapes$NOME %in% i,]$geometry
setores_shapes[setores_shapes$NOME %in% i,]$geometry = sf::st_convex_hull(setor_bug)
}
setor_bug <- setores_shapes[setores_shapes$NOME %in% setores_bugs[2],]
setor_bug <- setores_shapes[setores_shapes$NOME %in% setores_bugs[1],]
setores_bugs <- c("203192 - SER V - GRANJA PORTUGAL I", "30336 - SER III  - BAIRRO ELLERY")
setor_bug <- setores_shapes[setores_shapes$NOME %in% setores_bugs[1],]
View(setor_bug)
setor_bug <- setores_shapes[setores_shapes$NOME %in% setores_bugs[2],]
setores_bugs <- c("203192 - SER V - GRANJA PORTUGAL I", "30336 - SER III - BAIRRO ELLERY")
for (i in setores_bugs) {
setor_bug <- setores_shapes[setores_shapes$NOME %in% i,]$geometry
setores_shapes[setores_shapes$NOME %in% i,]$geometry = sf::st_convex_hull(setor_bug)
}
setores_bugs <- c("203192 - SER V - GRANJA PORTUGAL I", "30336 - SER III  - BAIRRO ELLERY")
for (i in setores_bugs) {
setor_bug <- setores_shapes[setores_shapes$NOME %in% i,]$geometry
setores_shapes[setores_shapes$NOME %in% i,]$geometry = sf::st_convex_hull(setor_bug)
}
for (i in setores_bugs) {
setor_bug <- setores_shapes[setores_shapes$NOME %in% i,]
setores_shapes[setores_shapes$NOME %in% i,]$geometry = sf::st_convex_hull(setor_bug$geometry)
}
shiny::runApp()
shiny::runApp()
setores_shapes <- sf::st_read("data/ColetaDomiciliarSetorizacao.geojson")
setores_bugs <- c("203192 - SER V - GRANJA PORTUGAL I", "30336 - SER III  - BAIRRO ELLERY")
for (i in setores_bugs) {
setor_bug <- setores_shapes[setores_shapes$NOME %in% i,]
setores_shapes[setores_shapes$NOME %in% i,]$geometry <- sf::st_convex_hull(setor_bug$geometry)
}
View(setores_shapes)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
renv::install("shiny.router")
install.packages("shiny.router")
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
renv::status()
renv::snapshot()
renv::status()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
6%%2
ls()
Is()
c <- 2
ls()
?power.anova.test()
?merge
c(1:4) * c(1:2)
as.logical(c(-2,-1,0))
is.list("10")
is.character("10")
a <- c(3, 0, TRUE)
B <- C(4, 0, FALSE)
b <- C(4, 0, FALSE)
b <- c(4, 0, FALSE)
a | b
shiny::runApp()
bairros_shapes <- sf::st_read("data/Bairros_de_Fortaleza.geojson")
bairro_choice <- bairros_shapes[bairros_shapes$Nome == "Granja Lisboa",]
View(bairro_choice)
setores_shapes <- sf::st_read("data/ColetaDomiciliarSetorizacao.geojson")
setores_bugs <- c("203192 - SER V - GRANJA PORTUGAL I", "30336 - SER III  - BAIRRO ELLERY")
for (i in setores_bugs) {
setor_bug <- setores_shapes[setores_shapes$NOME %in% i,]
setores_shapes[setores_shapes$NOME %in% i,]$geometry <- sf::st_convex_hull(setor_bug$geometry)
}
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
intersect_column <- lapply(setores_shapes$geometry, function(setor) {
return(sf::st_crosses(sf::st_boundary(bairro_choice_shape), sf::st_boundary(setor))[1] == 1)
})
intersect_column <- lapply(setores_shapes$geometry, function(setor) {
return(sf::st_crosses(sf::st_boundary(bairro_choice$geometry), sf::st_boundary(setor))[1] == 1)
})
setores_shapes$is_intersect <- intersect_column
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
View(intersect_setores)
View(intersect_column)
View(setores_shapes)
intersect_column <- lapply(setores_shapes$geometry, function(setor) {
return(sf::st_intersects(sf::st_boundary(bairro_choice$geometry), sf::st_boundary(setor))[1] == 1)
})
setores_shapes$is_intersect <- intersect_column
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
intersect_column <- lapply(setores_shapes$geometry, function(setor) {
return(sf::st_intersection(bairro_choice$geometry, setor))
})
intersect_column <- lapply(setores_shapes$geometry, function(setor) {
return(sf::st_contains(sf::st_boundary(bairro_choice$geometry), sf::st_boundary(setor))[1] == 1)
})
intersect_column <- lapply(setores_shapes$geometry, function(setor) {
return(sf::st_intersects(sf::st_boundary(bairro_choice$geometry), sf::st_boundary(setor))[1] == 1)
})
intersect_column <- lapply(setores_shapes$geometry, function(setor) {
return(sf::st_within(sf::st_boundary(bairro_choice$geometry), sf::st_boundary(setor))[1] == 1)
})
setores_shapes$is_intersect <- intersect_column
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
lisboa <- setores_shapes[setores_shapes$NOME == "201171 - SER V - GRANJA LISBOA I", ]
View(lisboa)
sf::st_polygonize(sf::st_boundary(lisboa$geometry))
sf::st_intersects(sf::st_polygonize(sf::st_boundary(lisboa$geometry)), bairro_choice)
View(intersect_column)
intersect_column <- lapply(setores_shapes$geometry, function(setor) {
return(sf::st_intersects(bairro_choice$geometry, setor)[1] == 1)
})
setores_shapes$is_intersect <- intersect_column
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
shiny::runApp()
shiny::runApp()
br_format <- scales::label_comma(
accuracy = 0.1,
big.mark = ".",
decimal.mark = ","
)
br_format("1500.123")
br_format(1500.123)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("ContentSecurityPolicy")
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("Data Level Security"),
mainPanel(
tags$h2("Logged in as: "),
tags$h3(textOutput("user")),
tags$h2("Security Groups: "),
tags$h3(textOutput("groups"))
)
)
server <- function(input, output, session) {
# Allows the app to be work while developing and when
# publishing to RStudio Connect without changing code
if(Sys.getenv("R_CONFIG_ACTIVE") == "rsconnect") {
user_name <- session$user
user_groups <- session$groups
} else {
user_name <- "test"
user_groups <- c("group1", "group2")
}
output$user <- renderText(user_name)
output$groups <- renderText(paste0(user_groups, collapse = ", "))
}
shinyApp(ui = ui, server = server)
df <- data.frame(x = 1:3, y = c('a', 'b', 'c'))
View(df)
View(dplyr::arrange(df, x))
View(dplyr::arrange(df, -x))
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(dplyr)
mtcars |>
tibble::rownames_to_column("model") |>
mutate(total = mpg + qsec) |>
arrange(desc(total)) |>
e_charts(model) |>
e_bar(mpg, stack = "grp") |>
e_bar(qsec, stack = "grp")
library(dplyr) library(echarts4r)
library(dplyr) library(echarts4r)
library(dplyr) + library(echarts4r)
library(dplyr)
library(echarts4r)
mtcars |>
tibble::rownames_to_column("model") |>
mutate(total = mpg + qsec) |>
arrange(desc(total)) |>
e_charts(model) |>
e_bar(mpg, stack = "grp") |>
e_bar(qsec, stack = "grp")
View(mtcars)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
regional_order <- mtcars %>%
group_by(mpg) %>%
summarise(mpg_total = sum(mpg)) %>%
arrange(-mpg_total)
regional_order <- dplyr:: mtcars %>%
group_by(mpg) %>%
summarise(mpg_total = sum(mpg)) %>%
arrange(-mpg_total)
regional_order <- dplyr::mtcars %>%
group_by(mpg) %>%
summarise(mpg_total = sum(mpg)) %>%
arrange(-mpg_total)
regional_order <- mtcars %>%
dplyr::group_by(mpg) %>%
summarise(mpg_total = sum(mpg)) %>%
arrange(-mpg_total)
library(dplyr)
regional_order <- mtcars %>%
dplyr::group_by(mpg) %>%
summarise(mpg_total = sum(mpg)) %>%
arrange(-mpg_total)
View(regional_order)
regional_order <- mtcars %>%
dplyr::group_by(mpg) %>%
summarise(mpg_total = sum(mpg)) %>%
arrange(-mpg_total)$mpg
regional_order <- mtcars %>%
dplyr::group_by(mpg) %>%
summarise(mpg_total = sum(mpg)) %>%
arrange(-mpg_total)[["mpg"]]
regional_order <- mtcars %>%
dplyr::group_by(mpg) %>%
summarise(mpg_total = sum(mpg)) %>%
arrange(-mpg_total) %>% [["mpg"]]
regional_order$mpg
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?toupper
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
