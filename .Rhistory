)
server <- function(input, output, session) {
output$view <- subpage <- reactive({
query <- getQueryString()
if (identical(query, list())) {
updateQueryString("?page=directory", mode = "push")
return()
}
query$page
})
outputOptions(output)
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
tags$div("teste")
)
server <- function(input, output, session) {
output$view <- subpage <- reactive({
query <- getQueryString()
if (identical(query, list())) {
updateQueryString("?page=directory", mode = "push")
return()
}
query$page
})
paste(outputOptions(output))
}
shinyApp(ui, server)
library(shiny)
shinyApp(
ui = fluidPage(
textInput("txt", "Enter new query string"),
helpText("Format: ?param1=val1&param2=val2"),
actionButton("go", "Update"),
hr(),
verbatimTextOutput("query")
),
server = function(input, output, session) {
observeEvent(input$go, {
updateQueryString(input$txt, mode = "push")
})
output$query <- renderText({
query <- getQueryString()
queryText <- paste(names(query), query,
sep = "=", collapse=", ")
paste("Your query string is:\n", queryText)
})
}
)
shinyApp(
ui = fluidPage(
textInput("txt", "Enter new query string"),
helpText("Format: ?param1=val1&param2=val2"),
actionButton("go", "Update"),
hr(),
verbatimTextOutput("query")
),
server = function(input, output, session) {
output$view <- subpage <- reactive({
query <- getQueryString()
print(query)
})
}
)
shinyApp(
ui = fluidPage(
textInput("txt", "Enter new query string"),
helpText("Format: ?param1=val1&param2=val2"),
actionButton("go", "Update"),
hr(),
verbatimTextOutput("query")
),
server = function(input, output, session) {
print(getQueryString())
output$view <- subpage <- reactive({
query <- getQueryString()
print(query)
})
}
)
shinyApp(
ui = fluidPage(
textInput("txt", "Enter new query string"),
helpText("Format: ?param1=val1&param2=val2"),
actionButton("go", "Update"),
hr(),
verbatimTextOutput("query")
),
server = function(input, output, session) {
print(isolate(getQueryString()))
output$view <- subpage <- reactive({
query <- getQueryString()
print(query)
})
}
)
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setores_shapes <- sf::st_read("data/ColetaDomiciliarSetorizacao.geojson")
View(setores_shapes)
bairros_shapes <- sf::st_read("data/Bairros_de_Fortaleza.geojson")
bairros_bug <- dplyr::filter(bairros_shapes, Nome %in% c("Alvaro Weyne",
"Bairro Ellery",
"Bom Jardim",
"Carlito Pamplona",
"Granja Lisboa",
"Granja Portugal",
"Jacarecanga",
"Monte Castelo",
"Presidente Kennedy",
"SÃ£o Gerardo"))
View(bairros_bug)
shiny::runApp()
bairro_choice_shape <- bairros_shapes[bairros_shapes$Nome == "Granja Portugal", ]
View(bairro_choice_shape)
intersect_column <- lapply(setores_shapes$geometry, function(setor) {
return(sf::st_crosses(sf::st_boundary(bairro_choice_shape), sf::st_boundary(setor))[1] == 1)
})
setores_shapes$is_intersect <- intersect_column
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
View(intersect_setores)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry,
bairro_choice_shape))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(bairro_choice_shape,geometry))
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(intersect_setores)
shiny::runApp()
shiny::runApp()
intersect_setores <- intersect_setores[-7,]
intersect_setores <- intersect_setores[-c(7),]
intersect_setores <- intersect_setores[-c(7),]
View(intersect_setores)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(bairro_choice_shape,geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry,
bairro_choice_shape))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry,
bairro_choice_shape))
View(intersect_setores)
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
View(intersect_setores)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
View(intersect_setores)
intersect_setores <- intersect_setores[-c(7),]
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
intersect_setores <- intersect_setores[-c(1),]
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
intersect_setores <- intersect_setores[-c(1),]
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
shiny::runApp()
shiny::runApp()
shiny::runApp()
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
View(intersect_setores)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
sf::st_boundary(intersect_setores)
sf::st_polygonize(intersect_setores)
intersect_setores <- sf::st_polygonize(sf::st_boundary(intersect_setores))
intersect_setores <- sf::st_polygonize(sf::st_boundary(intersect_setores))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
View(intersect_setores)
sf::st_boundary(intersect_setores)
sf::st_polygonize(sf::st_boundary(intersect_setores))
View(setores_shapes)
granja_portugal_I <- setores_shapes[setores_shapes$NOME == "203192 - SER V - GRANJA PORTUGAL I", ]
View(granja_portugal_I)
shiny::runApp()
shiny::runApp()
setores_shapes <- sf::st_read("data/ColetaDomiciliarSetorizacao.geojson")
View(setores_shapes)
shiny::runApp()
shiny::runApp()
View(intersect_setores)
union_setores <- lapply(setores_shapes$geometry, function(setor) {
return(sf::st_union(setor))
})
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
shiny::runApp()
shiny::runApp()
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
intersect_column <- lapply(setores_shapes$geometry, function(setor) {
return(sf::st_crosses(sf::st_boundary(bairro_choice_shape), sf::st_boundary(setor))[1] == 1)
})
setores_shapes$is_intersect <- intersect_column
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
union_setores <- lapply(setores_shapes$geometry, function(setor) {
return(sf::st_union(setor))
})
View(union_setores)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_union(geometry, bairro_choice_shape))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_combine(geometry, bairro_choice_shape))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_union(geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_combine(geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_union(geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_simplify(geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_polygonize(geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_segmentize(geometry))
sf::st_cast(intersect_setores, "POLYGON")
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_cast(geometry, "POLYGON"))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_cast(geometry, "MULTIPOLYGON"))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_cast(geometry, "MULTIPOLYGON"))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_cast(geometry, "POLYGON"))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_cast(geometry, "MULTIPOLYGON"))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_cast(geometry, "MULTIPOLYGON", do_split = TRUE))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_cast(geometry, "MULTIPOLYGON", group_or_split = TRUE))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
View(intersect_setores)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_cast(geometry, "MULTIPOLYGON") %>% sf::st_cast("POLYGON"))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_cast(geometry, "MULTIPOLYGON") | > sf::st_cast("POLYGON"))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_cast(geometry, "MULTIPOLYGON") |> sf::st_cast("POLYGON"))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_boundary(geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_boundary(geometry))
View(intersect_setores)
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_boundary(geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_line_merge(geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_polygonize(geometry))
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_polygon(geometry))
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_concave_hull(geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_convex_hull(geometry))
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
shiny::runApp()
shiny::runApp()
shiny::runApp()
bairro_choice_shape <- bairros_shapes[bairros_shapes$Nome == "Bairro Ellery", ]
View(bairro_choice_shape)
intersect_column <- lapply(setores_shapes$geometry, function(setor) {
return(sf::st_crosses(sf::st_boundary(bairro_choice_shape), sf::st_boundary(setor))[1] == 1)
})
setores_shapes$is_intersect <- intersect_column
intersect_setores <- dplyr::filter(setores_shapes, is_intersect == TRUE)
View(intersect_setores)
intersect_setores <- dplyr::mutate(intersect_setores,
geometry = sf::st_intersection(geometry, bairro_choice_shape))
dplyr::mutate(intersect_setores[-c(1),], geometry = sf::st_intersection(geometry, bairro_choice_shape))
dplyr::mutate(intersect_setores[-c(2),], geometry = sf::st_intersection(geometry, bairro_choice_shape))
dplyr::mutate(intersect_setores[-c(3),], geometry = sf::st_intersection(geometry, bairro_choice_shape))
dplyr::mutate(intersect_setores[-c(4),], geometry = sf::st_intersection(geometry, bairro_choice_shape))
dplyr::mutate(intersect_setores[-c(5),], geometry = sf::st_intersection(geometry, bairro_choice_shape))
setores_shapes[setores_shapes$NOME == "203192 - SER V - GRANJA PORTUGAL I", ]
setores_bugs <- c("203192 - SER V - GRANJA PORTUGAL I", "30336 - SER III - BAIRRO ELLERY")
setor_bug <- setores_shapes[setores_shapes$NOME %in% setores_bugs[1],]$geometry[1]
setores_shapes[setores_shapes$NOME %in% setores_bugs[1],]$geometry <- sf::st_convex_hull(setor_bug)
View(setor_bug)
View(setores_shapes)
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
for (i in setores_bugs) {
setor_bug <- setores_shapes[setores_shapes$NOME == i,]$geometry
setores_shapes[setores_shapes$NOME == i,]$geometry <- sf::st_convex_hull(setor_bug)
}
View(setores_shapes)
setores_bugs <- c("203192 - SER V - GRANJA PORTUGAL I", "30336 - SER III - BAIRRO ELLERY")
for (i in setores_bugs) {
setor_bug <- setores_shapes[setores_shapes$NOME == i,]$geometry
setores_shapes[setores_shapes$NOME == i,]$geometry <- sf::st_convex_hull(setor_bug)
}
View(setores_shapes)
View(setor_bug)
setores_bugs <- c("203192 - SER V - GRANJA PORTUGAL I", "30336 - SER III - BAIRRO ELLERY")
for (i in setores_bugs) {
setor_bug <- setores_shapes[setores_shapes$NOME == i,]$geometry
setores_shapes[setores_shapes$NOME == i,]$geometry = sf::st_convex_hull(setor_bug)
}
setores_bugs <- c("203192 - SER V - GRANJA PORTUGAL I", "30336 - SER III - BAIRRO ELLERY")
for (i in setores_bugs) {
setor_bug <- setores_shapes[setores_shapes$NOME %in% i,]$geometry
setores_shapes[setores_shapes$NOME %in% i,]$geometry = sf::st_convex_hull(setor_bug)
}
View(setor_bug)
setores_bugs <- c("203192 - SER V - GRANJA PORTUGAL I", "30336 - SER III - BAIRRO ELLERY")
for (i in setores_bugs) {
setor_bug <- setores_shapes[setores_shapes$NOME %in% i,]$geometry
setores_shapes[setores_shapes$NOME %in% i,]$geometry = sf::st_convex_hull(setor_bug)
}
setor_bug <- setores_shapes[setores_shapes$NOME %in% setores_bugs[2],]
setor_bug <- setores_shapes[setores_shapes$NOME %in% setores_bugs[1],]
setores_bugs <- c("203192 - SER V - GRANJA PORTUGAL I", "30336 - SER III  - BAIRRO ELLERY")
setor_bug <- setores_shapes[setores_shapes$NOME %in% setores_bugs[1],]
View(setor_bug)
setor_bug <- setores_shapes[setores_shapes$NOME %in% setores_bugs[2],]
setores_bugs <- c("203192 - SER V - GRANJA PORTUGAL I", "30336 - SER III - BAIRRO ELLERY")
for (i in setores_bugs) {
setor_bug <- setores_shapes[setores_shapes$NOME %in% i,]$geometry
setores_shapes[setores_shapes$NOME %in% i,]$geometry = sf::st_convex_hull(setor_bug)
}
setores_bugs <- c("203192 - SER V - GRANJA PORTUGAL I", "30336 - SER III  - BAIRRO ELLERY")
for (i in setores_bugs) {
setor_bug <- setores_shapes[setores_shapes$NOME %in% i,]$geometry
setores_shapes[setores_shapes$NOME %in% i,]$geometry = sf::st_convex_hull(setor_bug)
}
for (i in setores_bugs) {
setor_bug <- setores_shapes[setores_shapes$NOME %in% i,]
setores_shapes[setores_shapes$NOME %in% i,]$geometry = sf::st_convex_hull(setor_bug$geometry)
}
shiny::runApp()
shiny::runApp()
setores_shapes <- sf::st_read("data/ColetaDomiciliarSetorizacao.geojson")
setores_bugs <- c("203192 - SER V - GRANJA PORTUGAL I", "30336 - SER III  - BAIRRO ELLERY")
for (i in setores_bugs) {
setor_bug <- setores_shapes[setores_shapes$NOME %in% i,]
setores_shapes[setores_shapes$NOME %in% i,]$geometry <- sf::st_convex_hull(setor_bug$geometry)
}
View(setores_shapes)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
renv::install("shiny.router")
install.packages("shiny.router")
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
renv::status()
renv::snapshot()
renv::status()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
6%%2
ls()
Is()
c <- 2
ls()
?power.anova.test()
?merge
c(1:4) * c(1:2)
as.logical(c(-2,-1,0))
is.list("10")
is.character("10")
a <- c(3, 0, TRUE)
B <- C(4, 0, FALSE)
b <- C(4, 0, FALSE)
b <- c(4, 0, FALSE)
a | b
